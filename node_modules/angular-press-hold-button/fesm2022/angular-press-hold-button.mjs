import * as i0 from '@angular/core';
import { Injectable, EventEmitter, Component, ViewChild, Input, Output } from '@angular/core';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';

class AngularPressHoldButtonService {
    constructor() { }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: AngularPressHoldButtonService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: AngularPressHoldButtonService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: AngularPressHoldButtonService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [] });

class AngularPressHoldButton {
    constructor(renderer) {
        this.renderer = renderer;
        this.duration = 1500;
        this.backgroundColor = '#3498db';
        this.progressColor = '#2980b9';
        this.labelStart = '';
        this.labelProgress = '';
        this.labelFinish = '';
        this.actionStarted = new EventEmitter();
        this.actionCancelled = new EventEmitter();
        this.actionFinished = new EventEmitter();
        this.label = '';
        this.currentState = 'start';
        this.progressWidth = 0;
    }
    ngOnInit() {
        this.label = this.labelStart;
    }
    startAction(event) {
        event.preventDefault();
        if (this.progressWidth < 100) {
            this.clearProgress();
            this.label = this.labelProgress;
            this.currentState = 'progress';
            this.actionStarted.emit();
            this.progressInterval = setInterval(() => {
                this.progressWidth = Math.min(100, this.progressWidth + 100 / (this.duration / 100));
                this.updateProgress();
                if (this.progressWidth >= 100) {
                    this.actionSuccess();
                }
            }, 100);
        }
    }
    stopAction(event) {
        if (event) {
            event.preventDefault();
        }
        if (this.progressWidth < 100) {
            this.label = this.labelStart;
            this.currentState = 'start';
            this.actionCancelled.emit();
            clearInterval(this.progressInterval);
            this.progressInterval = setInterval(() => {
                this.progressWidth = Math.max(0, this.progressWidth - 100 / (this.duration / 100));
                this.updateProgress();
                if (this.progressWidth <= 0) {
                    clearInterval(this.progressInterval);
                }
            }, 100);
        }
    }
    actionSuccess() {
        clearInterval(this.progressInterval);
        this.label = this.labelFinish;
        this.currentState = 'finish';
        this.actionFinished.emit();
    }
    updateProgress() {
        if (this.progressBar && this.progressBar.nativeElement) {
            this.renderer.setStyle(this.progressBar.nativeElement, 'width', `${this.progressWidth}%`);
        }
    }
    clearProgress() {
        if (this.progressWidth < 100 && this.progressInterval) {
            clearInterval(this.progressInterval);
        }
        this.progressWidth = 0;
        this.updateProgress();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: AngularPressHoldButton, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.1", type: AngularPressHoldButton, isStandalone: true, selector: "angular-press-hold-button", inputs: { duration: "duration", backgroundColor: "backgroundColor", progressColor: "progressColor", labelStart: "labelStart", labelProgress: "labelProgress", labelFinish: "labelFinish" }, outputs: { actionStarted: "actionStarted", actionCancelled: "actionCancelled", actionFinished: "actionFinished" }, viewQueries: [{ propertyName: "progressBar", first: true, predicate: ["progressBar"], descendants: true }], ngImport: i0, template: "<button\n  (mousedown)=\"startAction($event)\"\n  (mouseup)=\"stopAction()\"\n  (mouseleave)=\"stopAction()\"\n  (touchstart)=\"startAction($event)\"\n  (touchend)=\"stopAction()\"\n  (touchcancel)=\"stopAction()\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  class=\"press-hold-button\"\n>\n  <div class=\"icon-container\">\n    <ng-container *ngIf=\"currentState === 'start'\">\n      <ng-content select=\"[slot='left'][when='start']\"></ng-content>\n    </ng-container>\n    <ng-container *ngIf=\"currentState === 'progress'\">\n      <ng-content select=\"[slot='left'][when='progress']\"></ng-content>\n    </ng-container>\n    <ng-container *ngIf=\"currentState === 'finish'\">\n      <ng-content select=\"[slot='left'][when='finish']\"></ng-content>\n    </ng-container>\n  </div>\n\n  <span class=\"label-container\">{{ label }}</span>\n\n  <div class=\"icon-container\">\n    <ng-container *ngIf=\"currentState === 'start'\">\n      <ng-content select=\"[slot='right'][when='start']\"></ng-content>\n    </ng-container>\n    <ng-container *ngIf=\"currentState === 'progress'\">\n      <ng-content select=\"[slot='right'][when='progress']\"></ng-content>\n    </ng-container>\n    <ng-container *ngIf=\"currentState === 'finish'\">\n      <ng-content select=\"[slot='right'][when='finish']\"></ng-content>\n    </ng-container>\n  </div>\n\n  <div\n    #progressBar\n    class=\"progress-bar\"\n    [ngStyle]=\"{ 'background-color': progressColor }\"\n  ></div>\n</button>\n", styles: [":root{--button-width: 200px;--button-height: 50px;--button-color: white;--button-padding: 20px;--button-border-radius: 5px;--icon-font-size: 20px}button{position:relative;width:var(--button-width);height:var(--button-height);padding:var(--button-padding);border:none;border-radius:var(--button-border-radius);color:var(--button-color);outline:none;display:flex;justify-content:space-evenly;align-items:center;overflow:hidden;cursor:pointer}button .label-container{z-index:2;position:relative;flex-grow:1}button .icon-container{position:relative;z-index:2;font-size:var(--icon-font-size)}.progress-bar{height:100%;position:absolute;top:0;left:0;width:0%;transition:width .2s ease;z-index:1}.label-container{z-index:2;position:relative}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: AngularPressHoldButton, decorators: [{
            type: Component,
            args: [{ selector: 'angular-press-hold-button', imports: [CommonModule], standalone: true, template: "<button\n  (mousedown)=\"startAction($event)\"\n  (mouseup)=\"stopAction()\"\n  (mouseleave)=\"stopAction()\"\n  (touchstart)=\"startAction($event)\"\n  (touchend)=\"stopAction()\"\n  (touchcancel)=\"stopAction()\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  class=\"press-hold-button\"\n>\n  <div class=\"icon-container\">\n    <ng-container *ngIf=\"currentState === 'start'\">\n      <ng-content select=\"[slot='left'][when='start']\"></ng-content>\n    </ng-container>\n    <ng-container *ngIf=\"currentState === 'progress'\">\n      <ng-content select=\"[slot='left'][when='progress']\"></ng-content>\n    </ng-container>\n    <ng-container *ngIf=\"currentState === 'finish'\">\n      <ng-content select=\"[slot='left'][when='finish']\"></ng-content>\n    </ng-container>\n  </div>\n\n  <span class=\"label-container\">{{ label }}</span>\n\n  <div class=\"icon-container\">\n    <ng-container *ngIf=\"currentState === 'start'\">\n      <ng-content select=\"[slot='right'][when='start']\"></ng-content>\n    </ng-container>\n    <ng-container *ngIf=\"currentState === 'progress'\">\n      <ng-content select=\"[slot='right'][when='progress']\"></ng-content>\n    </ng-container>\n    <ng-container *ngIf=\"currentState === 'finish'\">\n      <ng-content select=\"[slot='right'][when='finish']\"></ng-content>\n    </ng-container>\n  </div>\n\n  <div\n    #progressBar\n    class=\"progress-bar\"\n    [ngStyle]=\"{ 'background-color': progressColor }\"\n  ></div>\n</button>\n", styles: [":root{--button-width: 200px;--button-height: 50px;--button-color: white;--button-padding: 20px;--button-border-radius: 5px;--icon-font-size: 20px}button{position:relative;width:var(--button-width);height:var(--button-height);padding:var(--button-padding);border:none;border-radius:var(--button-border-radius);color:var(--button-color);outline:none;display:flex;justify-content:space-evenly;align-items:center;overflow:hidden;cursor:pointer}button .label-container{z-index:2;position:relative;flex-grow:1}button .icon-container{position:relative;z-index:2;font-size:var(--icon-font-size)}.progress-bar{height:100%;position:absolute;top:0;left:0;width:0%;transition:width .2s ease;z-index:1}.label-container{z-index:2;position:relative}\n"] }]
        }], ctorParameters: () => [{ type: i0.Renderer2 }], propDecorators: { progressBar: [{
                type: ViewChild,
                args: ['progressBar']
            }], duration: [{
                type: Input
            }], backgroundColor: [{
                type: Input
            }], progressColor: [{
                type: Input
            }], labelStart: [{
                type: Input
            }], labelProgress: [{
                type: Input
            }], labelFinish: [{
                type: Input
            }], actionStarted: [{
                type: Output
            }], actionCancelled: [{
                type: Output
            }], actionFinished: [{
                type: Output
            }] } });

/*
 * Public API Surface of angular-press-hold-button
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AngularPressHoldButton, AngularPressHoldButtonService };
//# sourceMappingURL=angular-press-hold-button.mjs.map
